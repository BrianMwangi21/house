var meta = {
    fiddleHeader: 'Ext Itunes',
    fiddleSubHeader: 'Open Source Itunes <i>like</i> UI' +
        '<br />'
};

var fiddleStore = null;




Ext.define('tunes.controller.Tunes', {
    extend: 'Ext.app.Controller',
    refs: [{
        ref: 'grid',
        selector: '#tunesGrid'
    }, {
        ref: 'dataView',
        selector: '#tunesView'
    }],
    init: function(application) {
        this.control({
            "#tunesGrid, #tunesView": {
                itemdblclick: this.onItemDblClick,
                select: this.onRecordSelect
            }
        });
    },
    onItemDblClick: function(component, record) {
        var w = Ext.create('tunes.view.PreviewWindow', {
            title: record.get('title') + ', provided courtesy of iTunes'
        });
        w.update(record.data);
        w.show();
    },
    onRecordSelect: function(component, record) {
        this.getDataView().getSelectionModel().select(record);
        this.getGrid().getSelectionModel().select(record);
    }
});


/*
 * File: app/model/Tune.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */
Ext.define('tunes.model.Tune', {
    extend: 'Ext.data.Model',
    fields: [{
        name: 'title',
    }, {
        name: 'artist'
    }, {
        name: 'category'
    }, {
        name: 'price',
        type: 'float'
    }, {
        name: 'image'
    }, {
        name: 'preview'
    }, {
        name: 'id'
    }, {
        name: 'currency'
    }, {
        name: 'link'
    }],
    proxy: {
        type: 'ajax',
        url: 'data.json',
        reader: {
            type: 'json'
        }
    }
});


Ext.define('tunes.store.Tunes', {
    extend: 'Ext.data.Store',
    requires: [
        'tunes.model.Tune'
    ],
    config: {
        proxy: {
            type: 'ajax',
            url: 'data.json',
            reader: {
                type: 'json',
                rootProperty: 'data'
            }
        },
        model: 'tunes.model.Tune',
        remoteSort: false,
        autoLoad: true
    }
}, function() {
    Ext.create('tunes.store.Tunes', {
        storeId: 'MyStore'
    });
});


Ext.define('tunes.view.MyViewport', {
    extend: 'Ext.container.Viewport',
    itemId: 'tunesView',
    layout: {
        align: 'stretch',
        type: 'vbox'
    },
    initComponent: function() {
        var me = this;
        Ext.applyIf(me, {
            items: [{
                xtype: 'gridpanel',
                flex: 1,
                itemId: 'tunesGrid',
                title: 'Itunes Grid',
                store: Ext.data.StoreManager.lookup('MyStore'),
                viewConfig: {
                    itemId: 'tunesGrid'
                },
                columns: [{
                    xtype: 'gridcolumn',
                    dataIndex: 'title',
                    text: 'Title',
                    flex: 1
                }, {
                    xtype: 'gridcolumn',
                    dataIndex: 'artist',
                    text: 'Artist',
                    flex: 1
                }, {
                    xtype: 'gridcolumn',
                    dataIndex: 'category',
                    text: 'Category'
                }, {
                    xtype: 'numbercolumn',
                    width: 60,
                    dataIndex: 'price',
                    text: 'Price'
                }, {
                    xtype: 'templatecolumn',
                    tpl: [
                        '<a href="{link}" target="itunes_store">',
                        '    <img src="resources/images/badge_itunes-sm.gif" />',
                        '</a>'
                    ],
                    width: 60,
                    dataIndex: 'link',
                    text: 'Link'
                }]
            }, {
                xtype: 'panel',
                flex: 1,
                autoScroll: true,
                layout: {
                    type: 'fit'
                },
                title: 'Itunes Music Videos',
                items: [{
                    xtype: 'dataview',
                    itemId: 'tunesView',
                    itemCls: 'video',
                    itemSelector: 'div',
                    itemTpl: [
                        '<figure>',
                        '    <img src="{image}" />',
                        '    <figcaption>{title}<br />{artist}</figcaption>',
                        '</figure>'
                    ],
                    overItemCls: 'overvideo',
                    store: 'Tunes',
                    trackOver: true
                }]
            }]
        });
        me.callParent(arguments);
    }
});


Ext.define('tunes.view.PreviewWindow', {
    extend: 'Ext.window.Window',
    resizable: false,
    title: 'My Window',
    modal: true,
    initComponent: function() {
        var me = this;
        Ext.applyIf(me, {
            tpl: [
                '<video autoplay preload="auto">',
                '    <source src="{preview}" type="video/mp4" > ',
                '</video>'
            ]
        });
        me.callParent(arguments);
    }
});


Ext.define('tunes.view.Viewport', {
    extend: 'tunes.view.MyViewport',
    requires: [
        'tunes.view.MyViewport',
        'tunes.view.PreviewWindow'
    ]
});


// Boiler plate
Ext.define('App.BoxModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.box',
    data: {
        header: meta.fiddleHeader,
        subheader: meta.fiddleSubHeader
    }
});
Ext.define('App.Box', {
    extend: "Ext.container.Container",
    border: true,
    padding: 25,
    viewModel: {
        type: 'box'
    },
    items: [{
        xtype: 'panel',
        bind: {
            title: '{header}'
        },
        items: [{
            xtype: 'panel',
            padding: 10,
            border: false,
            bind: {
                html: '{subheader}'
            }
        }],
        region: 'north'
    }]
});
Ext.onReady(function() {
    var fiddle = Ext.create('tunes.view.Viewport'),
        win = Ext.create('Ext.Window', {
            title: meta.fiddleHeader,
            closable: false,
            maximizable: true,
            height: 500,
            width: 700,
            layout: 'fit',
            items: fiddle
        }),
        positionX = 25,
        positionY = 192;
    win.showAt([positionX, positionY]);
    Ext.QuickTips.init();
    window.setTimeout(function() {
        win.maximize(true);
    }, 2500);
    Ext.create('App.Box', {
        renderTo: Ext.getBody()
    });
});

// Boiler plate
Ext.define('App.BoxModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.box',
    data: {
        header: meta.fiddleHeader,
        subheader: meta.fiddleSubHeader
    }
});
Ext.define('App.Box', {
    extend: "Ext.container.Container",
    border: true,
    padding: 25,
    viewModel: {
        type: 'box'
    },
    items: [{
        xtype: 'panel',
        bind: {
            title: '{header}'
        },
        items: [{
            xtype: 'panel',
            padding: 10,
            border: false,
            bind: {
                html: '{subheader}'
            }
        }],
        region: 'north'
    }]
});
Ext.onReady(function() {
    var fiddle = Ext.create('tunes.view.Viewport'),
        win = Ext.create('Ext.Window', {
            title: meta.fiddleHeader,
            closable: false,
            maximizable: true,
            height: 500,
            width: 700,
            layout: 'fit',
            items: fiddle
        }),
        positionX = 25,
        positionY = 192;
    win.showAt([positionX, positionY]);
    Ext.QuickTips.init();
    window.setTimeout(function() {
        win.maximize(true);
    }, 2500);
    Ext.create('App.Box', {
        renderTo: Ext.getBody()
    });
});
